package hashguesser;

import java.awt.Color;
import java.security.Security;
import java.util.ArrayList;
import java.util.Collections;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.table.DefaultTableModel;

/** @author Ryan McAllister-Grum
 */
public class HashGuesserSwing extends javax.swing.JFrame {
    private ExecutorService executor;

    /**
     * Creates new form HashGuesserSwing
     */
    public HashGuesserSwing() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        hashLabel = new javax.swing.JLabel();
        hash = new javax.swing.JTextField();
        hashTypeLabel = new javax.swing.JLabel();
        hashType = new javax.swing.JComboBox<>();
        threadCountLabel = new javax.swing.JLabel();
        threadCount = new javax.swing.JTextField();
        random = new javax.swing.JCheckBox();
        startPause = new javax.swing.JButton();
        stop = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        hashingTable = new javax.swing.JTable();
        jProgressBar1 = new javax.swing.JProgressBar();
        regexLabel = new javax.swing.JLabel();
        regex = new javax.swing.JTextField();
        statusBar = new javax.swing.JLabel();
        updateIntervalLabel = new javax.swing.JLabel();
        updateInterval = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        hashLabel.setText("Hash");

        hash.setFocusCycleRoot(true);
        hash.setName("hash"); // NOI18N
        hash.setNextFocusableComponent(hashType);
        hash.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                hashKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                hashKeyTyped(evt);
            }
        });

        hashTypeLabel.setText("Hash Type");

        hashType.setName("hashType"); // NOI18N
        hashType.setNextFocusableComponent(threadCount);
        hashType.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                hashTypePopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                hashTypePopupMenuWillBecomeVisible(evt);
            }
        });

        threadCountLabel.setText("Thread Count");

        threadCount.setName("theadCount"); // NOI18N
        threadCount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                threadCountKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                threadCountKeyTyped(evt);
            }
        });

        random.setText("Random Guess?");

        startPause.setText("Start");
        startPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startPauseActionPerformed(evt);
            }
        });

        stop.setText("Stop");
        stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopActionPerformed(evt);
            }
        });

        jScrollPane1.setFocusable(false);

        hashingTable.setModel(new DefaultTableModel(new Object[]{"Thread", "Guess", "Hashes", "Total Hashes"}, 0));
        hashingTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(hashingTable);

        jProgressBar1.setName("progressBar"); // NOI18N
        jProgressBar1.setString("0 Hashes Remaining");
        jProgressBar1.setStringPainted(true);

        regexLabel.setText("Regex Expression");

        regex.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                regexKeyReleased(evt);
            }
        });

        statusBar.setText("Ready!");

        updateIntervalLabel.setText("Update Interval");

        updateInterval.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                updateIntervalKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(hashLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hash))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 1, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(startPause)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stop)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(hashTypeLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(hashType, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(threadCountLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(threadCount)))
                            .addComponent(statusBar)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(random)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(updateIntervalLabel)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(regex)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(regexLabel)
                                    .addComponent(updateInterval, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hashLabel)
                    .addComponent(hash, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hashTypeLabel)
                    .addComponent(hashType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(regexLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(threadCountLabel)
                    .addComponent(threadCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(regex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(random)
                    .addComponent(updateIntervalLabel)
                    .addComponent(updateInterval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(startPause)
                        .addComponent(stop))
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(statusBar))
        );

        hashType.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startPauseActionPerformed
        if (startPause.getText().equals("Start")) {
            try {        
                // First verify that all fields are not blank.
                if (hash.getText().isBlank()) {
                    hash.selectAll();
                    throw new Exception("Error: hash field cannot be empty or only contain spaces!");
                } else if (hashType.getSelectedItem() == null)
                    throw new Exception("Error: Hash Type cannot be blank!");
                 else if (hashType.getSelectedItem().equals(""))
                     throw new Exception("Error: Hash Type cannot be blank!");
                else if (Integer.decode(threadCount.getText()) <= 0)
                    throw new NumberFormatException("Error: Thread Count must be a positive whole number!");
                else if (regex.getText().isBlank())
                    throw new Exception("Error: regex field cannot be blank!");
                else if (!updateInterval.getText().isEmpty())
                    if (Integer.decode(updateInterval.getText()) <= 0)
                        throw new NumberFormatException("Error: Update Interval cannot be less than zero!");
                
                
                // Next, make sure the hash length is correct.
                checkHashLengthError();
                
                // Next, make sure the hash only contains hex values.
                if (!hash.getText().toLowerCase().matches("^[0-9a-f]{1,}$"))
                    throw new Exception("Error: Hash is not all hex (0-9,a-f)!");
                
                // Next, make sure the regular expression is valid.
                Pattern.compile(regex.getText());
                
                
                // Now create the threads with the given regex.
                executor = Executors.newFixedThreadPool(Integer.decode(threadCount.getText()));
                for (int i = 1; i <= Integer.decode(threadCount.getText()); i++) {
                    HashGuesser guesser = new HashGuesser(String.valueOf(i), hash.getText(), regex.getText(), hashType.getSelectedItem().toString(), random.isSelected(), hashingTable, statusBar);
                    executor.execute(guesser);
                }
                statusBar.setText("Searching...");
                startPause.setText("Pause");
                
            } catch (NumberFormatException e) {
                displayError(e.getMessage());
            } catch (PatternSyntaxException e) {
                displayError("Error: Regex pattern is invalid!");
            } catch (Exception e) {
                displayError(e.getMessage());
            }
        } else if (startPause.getText().equals("Pause")) {
            HashGuesser.pause();
            startPause.setText("Resume");
            statusBar.setText("Paused!");
        } else if (startPause.getText().equals("Resume")) {
            HashGuesser.unpause();
            startPause.setText("Pause");
            statusBar.setText("Searching...");
        }
        
    }//GEN-LAST:event_startPauseActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        
    }//GEN-LAST:event_formComponentShown

    private void hashTypePopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_hashTypePopupMenuWillBecomeVisible
        populateAlgorithms();
    }//GEN-LAST:event_hashTypePopupMenuWillBecomeVisible

    private void hashTypePopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_hashTypePopupMenuWillBecomeInvisible
        if (checkHashLengthColor())
            if (hashType.getSelectedItem().equals(""))
                hashLabel.setForeground(hashLabel.getBackground());
            else
                hashLabel.setForeground(Color.green);
        else
            hashLabel.setForeground(Color.red);
    }//GEN-LAST:event_hashTypePopupMenuWillBecomeInvisible

    private void hashKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hashKeyTyped
        
    }//GEN-LAST:event_hashKeyTyped

    private void threadCountKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_threadCountKeyTyped
        
    }//GEN-LAST:event_threadCountKeyTyped

    private void hashKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hashKeyReleased
        if (hashType.getSelectedItem() != null)
            if (hashType.getSelectedItem().equals(""))
                hashLabel.setForeground(hashLabel.getBackground());
            else if (checkHashLengthColor())
                if (hash.getText().toLowerCase().matches("^[0-9a-f]{1,}$"))
                    hashLabel.setForeground(Color.green);
                else
                    hashLabel.setForeground(Color.red);
            else
                hashLabel.setForeground(Color.red);
    }//GEN-LAST:event_hashKeyReleased

    private void threadCountKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_threadCountKeyReleased
        try {
            if (threadCount.getText().isEmpty())
                threadCountLabel.setForeground(threadCountLabel.getBackground());
            else if (Integer.decode(threadCount.getText()) > 0)
                threadCountLabel.setForeground(Color.green);
        } catch (NumberFormatException e) {
            threadCountLabel.setForeground(Color.red);
        }
    }//GEN-LAST:event_threadCountKeyReleased

    private void regexKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_regexKeyReleased
        if (regex.getText().isEmpty())
            regexLabel.setForeground(regexLabel.getBackground());
        else
            try {
                Pattern.compile(regex.getText());
                regexLabel.setForeground(Color.green);
            } catch (PatternSyntaxException e) {
                regexLabel.setForeground(Color.red);
            }
    }//GEN-LAST:event_regexKeyReleased

    private void stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopActionPerformed
        HashGuesser.unpause();
        HashGuesser.stop();
        executor.shutdown();
        while (hashingTable.getRowCount() != 0)
            ((DefaultTableModel) hashingTable.getModel()).removeRow(0);
        startPause.setText("Start");
        statusBar.setText("Ready!");
    }//GEN-LAST:event_stopActionPerformed

    private void updateIntervalKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_updateIntervalKeyReleased
        try {
            if (!updateInterval.getText().isEmpty())
                if (Integer.decode(updateInterval.getText()) < 0) {
                    HashGuesser.setUpdateInterval(0L);
                    updateIntervalLabel.setForeground(Color.red);
                } else {
                    HashGuesser.setUpdateInterval(Integer.decode(updateInterval.getText()));
                    updateIntervalLabel.setForeground(Color.green);
                }
            else {
                HashGuesser.setUpdateInterval(0L);
                updateIntervalLabel.setForeground(updateIntervalLabel.getBackground());
            }
        } catch (NumberFormatException e) {
            updateIntervalLabel.setForeground(Color.red);
        }
    }//GEN-LAST:event_updateIntervalKeyReleased

    private void displayError(String text) {
        showMessageDialog(null, text, "Error!", ERROR_MESSAGE);
    }
    
    private void populateAlgorithms() {
        if (hashType.getItemCount() == 0) {
            hashType.addItem("");
            ArrayList<String> algos = new ArrayList<>();
            for (String algo : Security.getAlgorithms("MessageDigest"))
                algos.add(algo);
            Collections.sort(algos);
            for (String algo : algos)
                hashType.addItem(algo);
        }
    }
    
    private void checkHashLengthError() throws Exception {
        if (hashType.getSelectedItem().equals("MD2")) {
            if (hash.getText().length() != 128/4)
                throw new Exception(String.format("Error: Hash length is not %d characters long (current length: %,d)!", 128/4, hash.getText().length()));
        } else if (hashType.getSelectedItem().equals("MD5")) {
            if (hash.getText().length() != 128/4)
                throw new Exception(String.format("Error: Hash length is not %d characters long (current length: %,d)!", 128/4, hash.getText().length()));
        } else if (hashType.getSelectedItem().equals("SHA")) {
            if (hash.getText().length() != 160/4)
                throw new Exception(String.format("Error: Hash length is not %d characters long (current length: %,d)!", 160/4, hash.getText().length()));
        } else if (hashType.getSelectedItem().equals("SHA-224") || hashType.getSelectedItem().equals("SHA-512/224") ||
                   hashType.getSelectedItem().equals("SHA3-224")) {
            if (hash.getText().length() != 224/4)
                throw new Exception(String.format("Error: Hash length is not %d characters long (current length: %,d)!", 224/4, hash.getText().length()));
        } else if (hashType.getSelectedItem().equals("SHA-256")  || hashType.getSelectedItem().equals("SHA-512/256") ||
                   hashType.getSelectedItem().equals("SHA3-256")) {
            if (hash.getText().length() != 256/4)
                throw new Exception(String.format("Error: Hash length is not %d characters long (current length: %,d)!", 256/4, hash.getText().length()));
        } else if (hashType.getSelectedItem().equals("SHA-384") || hashType.getSelectedItem().equals("SHA3-384")) {
            if (hash.getText().length() != 384/4)
                throw new Exception(String.format("Error: Hash length is not %d characters long (current length: %,d)!", 384/4, hash.getText().length()));
        } else if (hashType.getSelectedItem().equals("SHA-512") || hashType.getSelectedItem().equals("SHA3-512")) {
            if (hash.getText().length() != 512/4)
                throw new Exception(String.format("Error: Hash length is not %d characters long (current length: %,d)!", 512/4, hash.getText().length()));
        } 
    }
    
    private boolean checkHashLengthColor() {
        if (hashType.getSelectedItem().equals("MD2")) {
            if (hash.getText().length() != 128/4)
                return false;
        } else if (hashType.getSelectedItem().equals("MD5")) {
            if (hash.getText().length() != 128/4)
                return false;
        } else if (hashType.getSelectedItem().equals("SHA")) {
            if (hash.getText().length() != 160/4)
                return false;
        } else if (hashType.getSelectedItem().equals("SHA-224") || hashType.getSelectedItem().equals("SHA-512/224") ||
                   hashType.getSelectedItem().equals("SHA3-224")) {
            if (hash.getText().length() != 224/4)
                return false;
        } else if (hashType.getSelectedItem().equals("SHA-256")  || hashType.getSelectedItem().equals("SHA-512/256") ||
                   hashType.getSelectedItem().equals("SHA3-256")) {
            if (hash.getText().length() != 256/4)
                return false;
        } else if (hashType.getSelectedItem().equals("SHA-384") || hashType.getSelectedItem().equals("SHA3-384")) {
            if (hash.getText().length() != 384/4)
                return false;
        } else if (hashType.getSelectedItem().equals("SHA-512") || hashType.getSelectedItem().equals("SHA3-512")) {
            if (hash.getText().length() != 512/4)
                return false;
        }
            return true;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HashGuesserSwing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HashGuesserSwing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HashGuesserSwing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HashGuesserSwing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new HashGuesserSwing().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField hash;
    private javax.swing.JLabel hashLabel;
    private javax.swing.JComboBox<String> hashType;
    private javax.swing.JLabel hashTypeLabel;
    private javax.swing.JTable hashingTable;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox random;
    private javax.swing.JTextField regex;
    private javax.swing.JLabel regexLabel;
    private javax.swing.JButton startPause;
    private javax.swing.JLabel statusBar;
    private javax.swing.JButton stop;
    private javax.swing.JTextField threadCount;
    private javax.swing.JLabel threadCountLabel;
    private javax.swing.JTextField updateInterval;
    private javax.swing.JLabel updateIntervalLabel;
    // End of variables declaration//GEN-END:variables
}
